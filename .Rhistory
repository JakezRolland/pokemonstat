function
()
)
function()
{}
library(devtools)
library(roxygen2)
help(function)
help(ls)
library(pokemonstat)
roxygenise()
devtools::use_package("ggplot2")
usethis::use_package("ggplot2")
roxygenise()
devtools::use_package("utils")
roxygenise()
roxygenise()
roxygenise()
roxygenise()
roxygenise()
roxygenise()
library(pokemonstat)
getPokedex()
setwd(..)
setwd("..")
getPokedex()
body(sum)
body(fun = "getPokedex")
a=body(fun = "getPokedex")
a
strsplit(a,"{")
strsplit(a,split = "{")
body(fun = "getPokedex")="test"
body(fun = "getPokedex")="{return()}"
class(body(fun = "getPokedex"))
b="{return("test")}"
b='{return("test")}'
b
body(fun = "getPokedex")='{return()}'
b
b='{return('test')}'
b
b='{return("test")}'
b
class(b)
class(b)<-"{"
class(b)
b
body(fun = "getPokedex")=b
body(fun = "getPokedex")<-b
body(body)
f <- function(x) x^5
body(f) <- quote(5^x)
f
f <- function(x) x^5
body(f) <- quote(return())
f
f <- function(x) x^5
body(f) <- quote(return("test"))
f
f()
library(pokemonstat)
data=updateDatas()
if(file.exists("pokemonHistory.rds")){
data = readRDS("pokemonHistory.rds")
}
nameFilesLoaded = "filesLoaded.rds"
nameFileHistory="pokemonHistory.rds"
folder <- paste(getwd(),"/pokemonhistory",sep="");
if(file.exists("filesLoaded.rds")){
filesLoaded = readRDS("filesLoaded.rds")
}
filesLoaded=c();
filesLoaded = readRDS("filesLoaded.rds")
filesList = dir(folder)
newFiles = setdiff(filesList,filesLoaded);
newdata=data.frame();
for (file in newFiles){
print(file)
folder_file=file;
if(folder!=""){
folder_file <- paste(folder,"/",file,sep="")
}
file_info = file.info(folder_file);
if(file_info$size==0){
filesLoaded = c(filesLoaded,file);
next;
}
filesLoaded = c(filesLoaded,file);
data_file <- read.csv2(folder_file, header = TRUE, sep = ",", quote = "\"",
dec = ".", fill = TRUE,encoding="UTF-8")
print(dim(data_file))
data_file$Special.move.2<-NULL
newdata<-rbind(newdata,data_file)
}
newdata = cleanPokemonHistory(newdata)
data = rbind(data,newdata)
newdata
library(pokemonstat)
setwd("pokemonstat/")
library(roxygen2)
roxygenize()
library(pokemonstat)
summaryByDay(data)
shinyOdd<-function(nPotentialShinyCatched){
return(round(sum(dbinom(x=1:nPotentialShinyCatched,size=nPotentialShinyCatched,prob=1/450))*100,2))
}
shinyOdd(850)
shinyOdd(750)
shinyOdd(100)
shinyOdd(1000)
roxygenize()
roxygenize()
roxygenize()
Sys.info()
.libPaths()
infos = Sys.info();
infos
infos['sysname']
infos['sysname']=="Windows"
R --version
--version
R.Version()
Rinfos = R.version();
Rinfos = R.Version();
version = paste(Rinfos$major,Rinfos$minor,sep=".")
version
getCurrentRVersion<-function(){
Rinfos = R.Version();
version = paste(Rinfos$major,Rinfos$minor,sep=".")
return(version)
}
R
getWindowsLibPath<-function(){
return(paste("C:/Program Files/R/R-",getCurrentRVersion(),"/library"),sep="")
}
getCurrentRVersion<-function(){
Rinfos = R.Version();
version = paste(Rinfos$major,Rinfos$minor,sep=".")
return(version)
}
getWindowsLibPath()
getWindowsLibPath<-function(){
}
getWindowsLibPath<-function(){
return(paste("C:/Program Files/R/R-",getCurrentRVersion(),"/library",sep=""))
}
getWindowsLibPath()
R.home(component = "home")
setwd(R.home())
dir()
install.packages("FactoMineR")
#' getCurrentRVersion
#'
#' @export
getCurrentRVersion<-function(){
Rinfos = R.Version();
version = paste(Rinfos$major,Rinfos$minor,sep=".")
return(version)
}
#' getLibPath
#' @export
getLibPath<-function(){
return(paste(R.home(),"/library",sep=""));
}
packages_to_install
toinstall = c("shiny","shinydashboard","DT");
packages_to_install=toinstall
to_install<-packages_to_install %in% rownames(installed.packages(getLibPath()))
to_install
installed.packages(getLibPath())
print(packages_to_install[!to_install])
if (FALSE %in% to_install){
install.packages(packages_to_install[!to_install],dependencies=TRUE,repos='http://cran.us.r-project.org',lib=getLibPath())
}
toinstall = c("shiny","shinydashboard","DT");
packages_to_install = toinstall
to_install<-packages_to_install %in% rownames(installed.packages(getLibPath()))
#' getLibPath
#' @export
getLibPath<-function(){
return(paste(R.home(),"/library",sep=""));
}
to_install<-packages_to_install %in% rownames(installed.packages(getLibPath()))
print(packages_to_install[!to_install])
if (FALSE %in% to_install){
install.packages(packages_to_install[!to_install],dependencies=TRUE,repos='http://cran.us.r-project.org',lib=getLibPath())
}
lapply(packages_to_install, require, character.only = TRUE, quietly=TRUE,lib.loc=getLibPath());
with_libpaths(new = "Rlibrary", install_github("jakezblb/blbpackage",auth_token = "c6f68e89c0e0110e6c751d925b5b5743dce9f387"))
library(devtools)
with_libpaths(new = "Rlibrary", install_github("jakezblb/blbpackage",auth_token = "c6f68e89c0e0110e6c751d925b5b5743dce9f387"))
install_github("jakezblb/blbpackage",auth_token = "c6f68e89c0e0110e6c751d925b5b5743dce9f387")
toinstall = c("shiny","shinydashboard","DT","withr");
to_install<-packages_to_install %in% rownames(installed.packages(getLibPath()))
packages_to_install=toinstall
to_install<-packages_to_install %in% rownames(installed.packages(getLibPath()))
print(packages_to_install[!to_install])
if (FALSE %in% to_install){
install.packages(packages_to_install[!to_install],dependencies=TRUE,repos='http://cran.us.r-project.org',lib=getLibPath())
}
install.packages(packages_to_install[!to_install], dependencies = TRUE, repos = "http://cran.us.r-project.org", lib = getLibPath())
lapply(packages_to_install, require, character.only = TRUE, quietly=TRUE,lib.loc=getLibPath());
with_libpaths(new = getLibPath(), install_github("jakezblb/blbpackage",auth_token = "c6f68e89c0e0110e6c751d925b5b5743dce9f387"))
toinstall = c("shiny","shinydashboard","DT","withr","devtools");
packages_to_install=toinstall
to_install<-packages_to_install %in% rownames(installed.packages(getLibPath()))
print(packages_to_install[!to_install])
if (FALSE %in% to_install){
install.packages(packages_to_install[!to_install],dependencies=TRUE,repos='http://cran.us.r-project.org',lib=getLibPath())
}
lapply(packages_to_install, require, character.only = TRUE, quietly=TRUE,lib.loc=getLibPath());
with_libpaths(new = getLibPath(), install_github("jakezblb/blbpackage",auth_token = "c6f68e89c0e0110e6c751d925b5b5743dce9f387"))
with_libpaths(new = getLibPath(), install_github("JakezRolland/pokemonstat"))
#' installGitHubPackage
#'
#' @param user_repo user/repo as on github
#' @param pat pat if package is private
#'
#' @importFrom withr with_libpaths
#' @export
installGitHubPackage <- function(user_repo,pat=""){
if(pat==""){
with_libpaths(new = getLibPath(), install_github(user_repo))
}
else {
with_libpaths(new = getLibPath(), install_github(user_repo,auth_token = pat))
}
}
installGitHubPackage("JakezRolland/pokemonstat")
installGitHubPackage("jakezblb/blbpackage",""c6f68e89c0e0110e6c751d925b5b5743dce9f387")
installGitHubPackage("jakezblb/blbpackage","c6f68e89c0e0110e6c751d925b5b5743dce9f387")
library(roxygen2)
roxygenise()
roxygenise()
user_repo
user_repo="jakez/blbpackage"
packageName = strsplit(user_repo,split = "/")[1][[2]]
strsplit(user_repo,split = "/")
packageName = strsplit(user_repo,split = "/")[[1]][2]
#' installandLoadGitHubPackage
#'
#' @param user_repo user/repo as on github
#' @param pat pat if package is private
#' @param packageName name of package
#'
#' @importFrom withr with_libpaths
#' @export
installandLoadGitHubPackage <- function(user_repo,pat=""){
functionName<-match.call()[[1]]
step<-"Start"
tryCatch({
packageName = strsplit(user_repo,split = "/")[[1]][2]
if(pat==""){
with_libpaths(new = getLibPath(), install_github(user_repo))
}
else {
with_libpaths(new = getLibPath(), install_github(user_repo,auth_token = pat))
}
library(packageName)
}, error = function(err) onError(err,functionName,step ))
}
roxygenise()
packageName
lapply(packageName, require, character.only = TRUE, quietly=TRUE,lib.loc=getLibPath());
roxygenise()
roxygenise()
installandGitHubPackage("jakezblb/blbpackage")
#' installandLoadGitHubPackage
#'
#' @param user_repo user/repo/pat as on github (pat if private)
#' @param pat pat if package is private
#'
#' @importFrom withr with_libpaths
#' @export
installandGitHubPackage <- function(user_repo_pat){
functionName<-match.call()[[1]]
step<-"Start"
tryCatch({
packageName = strsplit(user_repo,split = "/")[[1]][2]
pat = strsplit(user_repo,split = "/")[[1]][3]
if(pat==""){
with_libpaths(new = getLibPath(), install_github(user_repo))
}
else {
with_libpaths(new = getLibPath(), install_github(user_repo,auth_token = pat))
}
#lapply(packageName, require, character.only = TRUE, quietly=TRUE,lib.loc=getLibPath());
}, error = function(err) onError(err,functionName,step ))
}
installandGitHubPackage("jakezblb/blbpackage")
user_repo_pat
user_repo_pat="jakezblb/blbpackage/c6f68e89c0e0110e6c751d925b5b5743dce9f387"
packageName = strsplit(user_repo,split = "/")[[1]][2]
pat = strsplit(user_repo,split = "/")[[1]][3]
packageName
pat
strsplit(user_repo,split = "/")
#' installandLoadGitHubPackage
#'
#' @param user_repo user/repo/pat as on github (pat if private)
#' @param pat pat if package is private
#'
#' @importFrom withr with_libpaths
#' @export
installGitHubPackage <- function(user_repo_pat){
functionName<-match.call()[[1]]
step<-"Start"
tryCatch({
packageName = strsplit(user_repo_pat,split = "/")[[1]][2]
pat = strsplit(user_repo_pat,split = "/")[[1]][3]
if(pat==""){
with_libpaths(new = getLibPath(), install_github(user_repo))
}
else {
with_libpaths(new = getLibPath(), install_github(user_repo,auth_token = pat))
}
#lapply(packageName, require, character.only = TRUE, quietly=TRUE,lib.loc=getLibPath());
}, error = function(err) onError(err,functionName,step ))
}
user_repo = paste(split[1],split[2],sep="/")
split = strsplit(user_repo_pat,split = "/")[[1]]
packageName = split[2]
pat =split[3]
user_repo = paste(split[1],split[2],sep="/")
user_repo
pat
if(pat==""){
with_libpaths(new = getLibPath(), install_github(user_repo))
}
with_libpaths(new = getLibPath(), install_github(user_repo))
with_libpaths(new = getLibPath(), install_github(user_repo,auth_token = pat))
user_repo_pat="jakezblb/blbpackage"
split = strsplit(user_repo_pat,split = "/")[[1]]
packageName = split[2]
pat =split[3]
pat
split
#' installandLoadGitHubPackage
#'
#' @param user_repo user/repo/pat as on github (pat if private)
#' @param pat pat if package is private
#'
#' @importFrom withr with_libpaths
#' @export
installGitHubPackage <- function(user_repo_pat){
functionName<-match.call()[[1]]
step<-"Start"
tryCatch({
split = strsplit(user_repo_pat,split = "/")[[1]]
packageName = split[2]
pat =split[3]
user_repo = paste(split[1],split[2],sep="/")
if(is.na(pat)){
with_libpaths(new = getLibPath(), install_github(user_repo))
}
else {
with_libpaths(new = getLibPath(), install_github(user_repo,auth_token = pat))
}
#lapply(packageName, require, character.only = TRUE, quietly=TRUE,lib.loc=getLibPath());
}, error = function(err) onError(err,functionName,step ))
}
installGitHubPackage("jakezblb/blbpackage")
installGitHubPackage("jakezblb/blbpackage/c6f68e89c0e0110e6c751d925b5b5743dce9f387")
#' libraryGitHubPackage
#'
#' @param user_repo_pat user/repo/pat if private
#'
#' @return
#' @export
#'
#' @examples
libraryGitHubPackage <- function(user_repo_pat){
functionName<-match.call()[[1]]
step<-"Start"
tryCatch({
split = strsplit(user_repo_pat,split = "/")[[1]]
packageName = split[2]
lapply(packageName, require, character.only = TRUE, quietly=TRUE,lib.loc=getLibPath());
}, error = function(err) onError(err,functionName,step ))
}
libraryGitHubPackage(user_repo_pat)
roxygenise()
