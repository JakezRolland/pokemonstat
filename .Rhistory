packageName = strsplit(user_repo,split = "/")[[1]][2]
#' installandLoadGitHubPackage
#'
#' @param user_repo user/repo as on github
#' @param pat pat if package is private
#' @param packageName name of package
#'
#' @importFrom withr with_libpaths
#' @export
installandLoadGitHubPackage <- function(user_repo,pat=""){
functionName<-match.call()[[1]]
step<-"Start"
tryCatch({
packageName = strsplit(user_repo,split = "/")[[1]][2]
if(pat==""){
with_libpaths(new = getLibPath(), install_github(user_repo))
}
else {
with_libpaths(new = getLibPath(), install_github(user_repo,auth_token = pat))
}
library(packageName)
}, error = function(err) onError(err,functionName,step ))
}
roxygenise()
packageName
lapply(packageName, require, character.only = TRUE, quietly=TRUE,lib.loc=getLibPath());
roxygenise()
roxygenise()
installandGitHubPackage("jakezblb/blbpackage")
#' installandLoadGitHubPackage
#'
#' @param user_repo user/repo/pat as on github (pat if private)
#' @param pat pat if package is private
#'
#' @importFrom withr with_libpaths
#' @export
installandGitHubPackage <- function(user_repo_pat){
functionName<-match.call()[[1]]
step<-"Start"
tryCatch({
packageName = strsplit(user_repo,split = "/")[[1]][2]
pat = strsplit(user_repo,split = "/")[[1]][3]
if(pat==""){
with_libpaths(new = getLibPath(), install_github(user_repo))
}
else {
with_libpaths(new = getLibPath(), install_github(user_repo,auth_token = pat))
}
#lapply(packageName, require, character.only = TRUE, quietly=TRUE,lib.loc=getLibPath());
}, error = function(err) onError(err,functionName,step ))
}
installandGitHubPackage("jakezblb/blbpackage")
user_repo_pat
user_repo_pat="jakezblb/blbpackage/c6f68e89c0e0110e6c751d925b5b5743dce9f387"
packageName = strsplit(user_repo,split = "/")[[1]][2]
pat = strsplit(user_repo,split = "/")[[1]][3]
packageName
pat
strsplit(user_repo,split = "/")
#' installandLoadGitHubPackage
#'
#' @param user_repo user/repo/pat as on github (pat if private)
#' @param pat pat if package is private
#'
#' @importFrom withr with_libpaths
#' @export
installGitHubPackage <- function(user_repo_pat){
functionName<-match.call()[[1]]
step<-"Start"
tryCatch({
packageName = strsplit(user_repo_pat,split = "/")[[1]][2]
pat = strsplit(user_repo_pat,split = "/")[[1]][3]
if(pat==""){
with_libpaths(new = getLibPath(), install_github(user_repo))
}
else {
with_libpaths(new = getLibPath(), install_github(user_repo,auth_token = pat))
}
#lapply(packageName, require, character.only = TRUE, quietly=TRUE,lib.loc=getLibPath());
}, error = function(err) onError(err,functionName,step ))
}
user_repo = paste(split[1],split[2],sep="/")
split = strsplit(user_repo_pat,split = "/")[[1]]
packageName = split[2]
pat =split[3]
user_repo = paste(split[1],split[2],sep="/")
user_repo
pat
if(pat==""){
with_libpaths(new = getLibPath(), install_github(user_repo))
}
with_libpaths(new = getLibPath(), install_github(user_repo))
with_libpaths(new = getLibPath(), install_github(user_repo,auth_token = pat))
user_repo_pat="jakezblb/blbpackage"
split = strsplit(user_repo_pat,split = "/")[[1]]
packageName = split[2]
pat =split[3]
pat
split
#' installandLoadGitHubPackage
#'
#' @param user_repo user/repo/pat as on github (pat if private)
#' @param pat pat if package is private
#'
#' @importFrom withr with_libpaths
#' @export
installGitHubPackage <- function(user_repo_pat){
functionName<-match.call()[[1]]
step<-"Start"
tryCatch({
split = strsplit(user_repo_pat,split = "/")[[1]]
packageName = split[2]
pat =split[3]
user_repo = paste(split[1],split[2],sep="/")
if(is.na(pat)){
with_libpaths(new = getLibPath(), install_github(user_repo))
}
else {
with_libpaths(new = getLibPath(), install_github(user_repo,auth_token = pat))
}
#lapply(packageName, require, character.only = TRUE, quietly=TRUE,lib.loc=getLibPath());
}, error = function(err) onError(err,functionName,step ))
}
installGitHubPackage("jakezblb/blbpackage")
installGitHubPackage("jakezblb/blbpackage/c6f68e89c0e0110e6c751d925b5b5743dce9f387")
#' libraryGitHubPackage
#'
#' @param user_repo_pat user/repo/pat if private
#'
#' @return
#' @export
#'
#' @examples
libraryGitHubPackage <- function(user_repo_pat){
functionName<-match.call()[[1]]
step<-"Start"
tryCatch({
split = strsplit(user_repo_pat,split = "/")[[1]]
packageName = split[2]
lapply(packageName, require, character.only = TRUE, quietly=TRUE,lib.loc=getLibPath());
}, error = function(err) onError(err,functionName,step ))
}
libraryGitHubPackage(user_repo_pat)
roxygenise()
library(devtools)
library(roxygen2)
roxygenise()
roxygenise()
library(pokemonstat)
library(withr)
install.packages(withr)
install.packages("withr")
install.packages("withr")
library("withr")
with_libpaths(new = getLibPath(), install_github("JakezRolland/pokemonstat"))
with_libpaths(new = paste(R.home(),"/library",sep=""), install_github("JakezRolland/pokemonstat"))
install.packages("devtools")
library("devtools")
with_libpaths(new = paste(R.home(),"/library",sep=""), install_github("JakezRolland/pokemonstat"))
library(pokemonstat)
installRPackages(toinstall);
toinstall = c("shiny","shinydashboard","DT");
installRPackages(toinstall);
libraryPackages(toinstall);
ui <- dashboardPage(
dashboardHeader(title = "Pokemon Go Alaktar"),
## Sidebar content
dashboardSidebar(
sidebarMenu(
menuItem("Statistiques globales", tabName = "summarydays", icon = icon("dashboard")),
menuItem("Statistiques par jours", tabName = "bydate", icon = icon("dashboard"))
)
),
## Body content
dashboardBody(
tabItems(
tabItem(tabName = "summarydays",
fluidRow(
box(
actionButton("update", "Update Datas"),
selectInput("day", label = h3("Date de Capture"),
choices = sort(unique(data$scan.day)),
selected = tail(sort(unique(data$scan.day)), 1))
,textOutput('total'),
textOutput('shiny'),
textOutput('proba')
#      plotOutput('plot')
),
box(tableOutput('data'))
)
),
# First tab content
tabItem(tabName = "bydate",
fluidRow(
box(
actionButton("update", "Update Datas"),
selectInput("day", label = h3("Date de Capture"),
choices = sort(unique(data$scan.day)),
selected = tail(sort(unique(data$scan.day)), 1))
,textOutput('total'),
textOutput('shiny'),
textOutput('proba')
#      plotOutput('plot')
),
box(tableOutput('data'))
)
),
# Second tab content
tabItem(tabName = "widgets",
h2("Widgets tab content")
)
)
)
)
server <- function(input, output,session) {
rv <- reactiveValues(data=updateDatas()) ;
observeEvent(input$update, {
rv$data=updateDatas()
rv$dates = sort(unique(rv$data$scan.day))
updateSelectInput(session, "day",
choices = sort(unique(rv$data$scan.day),decreasing = TRUE),
selected = tail(sort(unique(rv$data$scan.day)), 1)
)
})
getCaptureByDay<-reactive({
day=input$day
data=rv$data
data_day<-data[data$scan.day==day,]
data_day_shiny = data_day[data_day$shiny==1,]
captures = as.data.frame(table(data_day$Name))
captures = captures[captures$Freq>0,];
captures = captures[order(captures$Freq,decreasing = TRUE),]
captureShiny = as.data.frame(table(data_day_shiny$Name))
captureShiny = captureShiny[captureShiny$Freq>0,];
captureShiny = captureShiny[order(captureShiny$Freq,decreasing = TRUE),]
total = sum(captures$Freq);
shiny = sum(captureShiny$Freq)
captures$Part <- paste(round(captures$Freq*100/total,1),"%",sep="");
# captures$ProbaShiny<-0
# print("ok1")
# capturesShin <- captures[captures$Var1%in%captureShiny$Var1];
# probashin<-c();
# print("ok2")
# for (i in 1:dim(capturesShin)[1]){
#   row=capturesShin[i,]
#   probashin=c(probashin,sum(dbinom(x=1:row$Freq,size=shiny,prob=1/450))*100)
# }
# print("ok3")
# captures$ProbaShiny[captures$Var1%in%captureShiny$Var1] <- paste(probashin,"%",sep="");
return(list(captures=captures,total=total,shiny=shiny,ratio=shiny/total))
})
output$data <- renderTable(getCaptureByDay()$captures)
output$total <- renderText(paste("Pokemon eu:",getCaptureByDay()$total))
output$shiny <- renderText(paste("Dont potentiel shiny:",getCaptureByDay()$shiny))
output$proba <- renderText(paste("Proba d'avoir un shiny: ",round(sum(dbinom(x=1:getCaptureByDay()$shiny,size=getCaptureByDay()$shiny,prob=1/450))*100,2),"%"))
#output$plot <- renderPlot(expr = ggplot(data[data$scan.day==input$day,], aes(x=Name)) +
# geom_bar()+coord_flip() )
}
ui <- dashboardPage(
dashboardHeader(title = "Pokemon Go Alaktar"),
## Sidebar content
dashboardSidebar(
sidebarMenu(
menuItem("Statistiques globales", tabName = "summarydays", icon = icon("dashboard")),
menuItem("Statistiques par jours", tabName = "bydate", icon = icon("dashboard"))
)
),
## Body content
dashboardBody(
tabItems(
tabItem(tabName = "summarydays",
fluidRow(
box(
actionButton("update", "Update Datas"),
selectInput("day", label = h3("Date de Capture"),
choices = sort(unique(data$scan.day)),
selected = tail(sort(unique(data$scan.day)), 1))
,textOutput('total'),
textOutput('shiny'),
textOutput('proba')
#      plotOutput('plot')
),
box(tableOutput('data'))
)
),
# First tab content
tabItem(tabName = "bydate",
fluidRow(
box(
actionButton("update", "Update Datas"),
selectInput("day", label = h3("Date de Capture"),
choices = sort(unique(data$scan.day)),
selected = tail(sort(unique(data$scan.day)), 1))
,textOutput('total'),
textOutput('shiny'),
textOutput('proba')
#      plotOutput('plot')
),
box(tableOutput('data'))
)
),
# Second tab content
tabItem(tabName = "widgets",
h2("Widgets tab content")
)
)
)
)
server <- function(input, output,session) {
rv <- reactiveValues(data=updateDatas()) ;
observeEvent(input$update, {
rv$data=updateDatas()
rv$dates = sort(unique(rv$data$scan.day))
updateSelectInput(session, "day",
choices = sort(unique(rv$data$scan.day),decreasing = TRUE),
selected = tail(sort(unique(rv$data$scan.day)), 1)
)
})
getCaptureByDay<-reactive({
day=input$day
data=rv$data
data_day<-data[data$scan.day==day,]
data_day_shiny = data_day[data_day$shiny==1,]
captures = as.data.frame(table(data_day$Name))
captures = captures[captures$Freq>0,];
captures = captures[order(captures$Freq,decreasing = TRUE),]
captureShiny = as.data.frame(table(data_day_shiny$Name))
captureShiny = captureShiny[captureShiny$Freq>0,];
captureShiny = captureShiny[order(captureShiny$Freq,decreasing = TRUE),]
total = sum(captures$Freq);
shiny = sum(captureShiny$Freq)
captures$Part <- paste(round(captures$Freq*100/total,1),"%",sep="");
# captures$ProbaShiny<-0
# print("ok1")
# capturesShin <- captures[captures$Var1%in%captureShiny$Var1];
# probashin<-c();
# print("ok2")
# for (i in 1:dim(capturesShin)[1]){
#   row=capturesShin[i,]
#   probashin=c(probashin,sum(dbinom(x=1:row$Freq,size=shiny,prob=1/450))*100)
# }
# print("ok3")
# captures$ProbaShiny[captures$Var1%in%captureShiny$Var1] <- paste(probashin,"%",sep="");
return(list(captures=captures,total=total,shiny=shiny,ratio=shiny/total))
})
output$data <- renderTable(getCaptureByDay()$captures)
output$total <- renderText(paste("Pokemon eu:",getCaptureByDay()$total))
output$shiny <- renderText(paste("Dont potentiel shiny:",getCaptureByDay()$shiny))
output$proba <- renderText(paste("Proba d'avoir un shiny: ",round(sum(dbinom(x=1:getCaptureByDay()$shiny,size=getCaptureByDay()$shiny,prob=1/450))*100,2),"%"))
#output$plot <- renderPlot(expr = ggplot(data[data$scan.day==input$day,], aes(x=Name)) +
# geom_bar()+coord_flip() )
}
options(shiny.port = 6334)
options(shiny.host="0.0.0.0")
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "Pokemon Go Alaktar"),
## Sidebar content
dashboardSidebar(
sidebarMenu(
menuItem("Statistiques globales", tabName = "summarydays", icon = icon("dashboard")),
menuItem("Statistiques par jours", tabName = "bydate", icon = icon("dashboard"))
)
),
## Body content
dashboardBody(
tabItems(
tabItem(tabName = "summarydays",
fluidRow(
box(
actionButton("update", "Update Datas"),
selectInput("day", label = h3("Date de Capture"),
choices = sort(unique(data$scan.day)),
selected = tail(sort(unique(data$scan.day)), 1))
,textOutput('total'),
textOutput('shiny'),
textOutput('proba')
#      plotOutput('plot')
),
box(tableOutput('data'))
)
),
# First tab content
tabItem(tabName = "bydate",
fluidRow(
box(
actionButton("update", "Update Datas"),
selectInput("day", label = h3("Date de Capture"),
choices = sort(unique(data$scan.day)),
selected = tail(sort(unique(data$scan.day)), 1))
,textOutput('total'),
textOutput('shiny'),
textOutput('proba')
#      plotOutput('plot')
),
box(tableOutput('data'))
)
),
# Second tab content
tabItem(tabName = "widgets",
h2("Widgets tab content")
)
)
)
)
data
data=updateDatas()
ui <- dashboardPage(
dashboardHeader(title = "Pokemon Go Alaktar"),
## Sidebar content
dashboardSidebar(
sidebarMenu(
menuItem("Statistiques globales", tabName = "summarydays", icon = icon("dashboard")),
menuItem("Statistiques par jours", tabName = "bydate", icon = icon("dashboard"))
)
),
## Body content
dashboardBody(
tabItems(
tabItem(tabName = "summarydays",
fluidRow(
box(
actionButton("update", "Update Datas"),
selectInput("day", label = h3("Date de Capture"),
choices = sort(unique(data$scan.day)),
selected = tail(sort(unique(data$scan.day)), 1))
,textOutput('total'),
textOutput('shiny'),
textOutput('proba')
#      plotOutput('plot')
),
box(tableOutput('data'))
)
),
# First tab content
tabItem(tabName = "bydate",
fluidRow(
box(
actionButton("update", "Update Datas"),
selectInput("day", label = h3("Date de Capture"),
choices = sort(unique(data$scan.day)),
selected = tail(sort(unique(data$scan.day)), 1))
,textOutput('total'),
textOutput('shiny'),
textOutput('proba')
#      plotOutput('plot')
),
box(tableOutput('data'))
)
),
# Second tab content
tabItem(tabName = "widgets",
h2("Widgets tab content")
)
)
)
)
server <- function(input, output,session) {
rv <- reactiveValues(data=updateDatas()) ;
observeEvent(input$update, {
rv$data=updateDatas()
rv$dates = sort(unique(rv$data$scan.day))
updateSelectInput(session, "day",
choices = sort(unique(rv$data$scan.day),decreasing = TRUE),
selected = tail(sort(unique(rv$data$scan.day)), 1)
)
})
getCaptureByDay<-reactive({
day=input$day
data=rv$data
data_day<-data[data$scan.day==day,]
data_day_shiny = data_day[data_day$shiny==1,]
captures = as.data.frame(table(data_day$Name))
captures = captures[captures$Freq>0,];
captures = captures[order(captures$Freq,decreasing = TRUE),]
captureShiny = as.data.frame(table(data_day_shiny$Name))
captureShiny = captureShiny[captureShiny$Freq>0,];
captureShiny = captureShiny[order(captureShiny$Freq,decreasing = TRUE),]
total = sum(captures$Freq);
shiny = sum(captureShiny$Freq)
captures$Part <- paste(round(captures$Freq*100/total,1),"%",sep="");
# captures$ProbaShiny<-0
# print("ok1")
# capturesShin <- captures[captures$Var1%in%captureShiny$Var1];
# probashin<-c();
# print("ok2")
# for (i in 1:dim(capturesShin)[1]){
#   row=capturesShin[i,]
#   probashin=c(probashin,sum(dbinom(x=1:row$Freq,size=shiny,prob=1/450))*100)
# }
# print("ok3")
# captures$ProbaShiny[captures$Var1%in%captureShiny$Var1] <- paste(probashin,"%",sep="");
return(list(captures=captures,total=total,shiny=shiny,ratio=shiny/total))
})
output$data <- renderTable(getCaptureByDay()$captures)
output$total <- renderText(paste("Pokemon eu:",getCaptureByDay()$total))
output$shiny <- renderText(paste("Dont potentiel shiny:",getCaptureByDay()$shiny))
output$proba <- renderText(paste("Proba d'avoir un shiny: ",round(sum(dbinom(x=1:getCaptureByDay()$shiny,size=getCaptureByDay()$shiny,prob=1/450))*100,2),"%"))
#output$plot <- renderPlot(expr = ggplot(data[data$scan.day==input$day,], aes(x=Name)) +
# geom_bar()+coord_flip() )
}
options(shiny.port = 6334)
options(shiny.host="0.0.0.0")
shinyApp(ui, server)
shinyApp(ui, server)
setwd("..")
dir
dir()
setwd("pokemonStatShiny/")
rlib = paste(R.home(),"/library",sep="");
install.packages("withr",lib =rlib )
install.packages("withr", lib = rlib)
